---
- hosts: ansible_controller
  gather_facts: true
  vars:
    kube_ports: 
      - 6443 
      - 2379
      - 2380
      - 10250
      - 10259
      - 10257
    kube_hosts: "{{ ansible_all_ipv4_addresses | difference([hostvars[inventory_hostname].ansible_default_ipv4.address]) }}"
  tasks:
    - name: Create ufw_rules map
      set_fact: 
        ufw_rules: "{{ ufw_rules | default([]) + [{'rule': 'allow', 'direction': 'in', 'to_port': item.0, 'from_ip': item.1}] }}"
      loop: "{{ kube_ports | product(kube_hosts) | list }}"
      loop_control:
        loop_var: item

    - name: Debug
      debug:
        var: kube_hosts
  tags:
    - set-ufw-rules

- hosts: controlplane_nodes, worker_nodes
  become: yes
  become_user: root
  vars:
    containerd_config_default_write: true
    containerd_config_cgroup_driver_systemd: true
    kubeadm_version: 1.25.0-00
    kubectl_version: 1.25.0-00
    kubelet_version: 1.25.0-00
    # ufw_rules: item
    # with_items: 
    #  ufw_rules: "{{ ufw_rules }}"
  roles:
    - kernel_config
    - repositories
    # - ansible-ufw
    - kubeadm
    - kubelet
    - kubectl
    - containerd
  tags: pre-k8s-init

- hosts: controlplane_nodes
  become: yes
  become_user: root
  vars:
    pod_network_cidr: 10.244.0.0/16 # pod CIDR range for cluster init, change this to match your CNI pluggin CIDR configuration
    host_ip: "{{ ansible_default_ipv4.address }}"
    host_name: "{{ inventory_hostname }}"
    kube_user: "asutliff"
    kube_config_path: "/home/{{ kube_user }}/.kube/config"
    default_config: true
    new_user_config: false
    flannel: true #set the name of the CNI plugin you want to use to true, currently supports only flannel
  roles:
    - cluster_init
    - kubeconfig
    - cni
  tags: cluster-init

- hosts: worker_nodes
  become: yes
  become_user: root
  roles:
    - add_node
  tags: add-node

- hosts: ansible_controller
  become: yes
  become_user: asutliff
  tasks:
  - name: Generate an OpenSSL private key with the default values (4096 bits, RSA)
    community.crypto.openssl_privatekey:
      path: /etc/ssl/private/ansible.com.pem
  - name: Generate an OpenSSL Certificate Signing Request
    community.crypto.openssl_csr:
      path: /etc/ssl/csr/ansible.csr
      privatekey_path: /etc/ssl/private/ansible.pem
      common_name: asutliff
      organization_name: system:masters

- hosts: controlplane_nodes #figure out how to limit this to only a single host
  tasks:
  - name: Copy CSR to Controleplane
    copy:
      src: /etc/ssl/csr/ansible.csr
      dest: ~/ansible.csr
  - name: Convert CSR into Usable format
    command: cat ansible.csr | base64 | tr -d "\n"
    register: ansible_csr
  - name: Create CSR Kubernetes Object
    command: |
      cat <<EOF | kubectl create -f 
      apiVersion: certificates.k8s.io/v1beta
      kind: CertificateSigningRequest
      metadata:
        name: asutliff
      spec:
        groups:
        - system: authenticated
        uses:
        - digital signature
        - key encipherment
        - server auth
        request:
          "{{ ansible_csr.stout_lines[0] }}"
      EOF
  - name: Sign CSR
    command: kubectl certificate approve asutliff

- hosts: ansible_controller
  become: yes
  become_user: asutliff
  vars:
    kube_user: "asutliff"
    kube_config_path: "/home/{{ kube_user }}/.kube/config"
    new_user_config: true
    default_user_config: false
  roles:
    - kubeconfig

- hosts: ansible_controller
  become: true
  roles:
    - argo_cd