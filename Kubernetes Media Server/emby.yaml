apiVersion: apps/v1
kind: Deployment
metadata:
  annotations: {}
  creationTimestamp: null
  labels:
    io.kompose.service: emby
    app: emby
  name: emby
  namespace: mediaserver
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: emby
  strategy:
    type: Recreate
  template:
    metadata:
      annotations: {}
      creationTimestamp: null
      labels:
        io.kompose.network/dockermediaserver-default: "true"
        io.kompose.service: emby
    spec:
      securityContext:
        #runAsUser: 1002
        #runAsGroup: 1002
        fsGroup: 1002
      containers:
        - env:
            - name: GID
              value: "1002"
            - name: GIDLIST
              value: "44"
            - name: TZ
              value: "America/New_York"
            - name: UID
              value: "1002"
          image: emby/embyserver
          name: emby
          ports:
            - containerPort: 8096
              protocol: UDP
            - containerPort: 8096
            - containerPort: 8920
          resources: {}
          volumeMounts:
            - mountPath: /config
              name: emby-conf
            - mountPath: /data/tvshows
              name: emby-nfs0
            - mountPath: /data/movies
              name: emby-nfs1
            - mountPath: /data/XXX
              name: emby-nfs2
      restartPolicy: Always
      volumes:
        - persistentVolumeClaim:
            claimName: emby-longhorn
          name: emby-conf
        - nfs:
            server: 172.31.0.15
            readOnly: false
            path: /mnt/Main/kubernetes/TV
          name: emby-nfs0
        - nfs:
            server: 172.31.0.15
            readOnly: false
            path: /mnt/Main/kubernetes/Movies
          name: emby-nfs1
        - nfs:
            server: 172.31.0.15
            readOnly: false
            path: /mnt/Main/kubernetes/XXX
          name: emby-nfs2
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: emby-longhorn
spec:
  storageClassName: longhorn
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 500Mi
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  creationTimestamp: null
  labels:
    app: emby
    io.kompose.service: emby
  name: emby
  namespace: mediaserver
spec:
  ports:
    - name: "8096"
      port: 8096
      protocol: UDP
      targetPort: 8096
    - name: 8096-tcp
      port: 8096
      targetPort: 8096
    - name: "8920"
      port: 8920
      targetPort: 8920
  selector:
    io.kompose.service: emby
status:
  loadBalancer: {}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    cert-manager.io/cluster-issuer: "cloudflare-issuer"
  name: emby-ingress-public
  namespace: mediaserver
spec:
  ingressClassName: public-nginx
  tls:
  - hosts:
      - emby.andrewsutliff.com
    secretName: emby-http-tls
  rules:
  - host: "emby.andrewsutliff.com"
    http:
      paths:
      - backend:
          service:
            name: emby
            port:
              number: 8096
        path: /
        pathType: Prefix

